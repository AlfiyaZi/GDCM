#!/usr/bin/make -f
# Based on the multi2 sample debian/rules file:
# ---
# Sample debian/rules that uses debhelper.
# This file is public domain software, originally written by Joey Hess.
#
# This version is for a multibinary package. It also allows you to build any
# of the binary packages independantly, via binary-<package> targets.
# ---

# Uncomment this to turn on verbose mode. 
#export DH_VERBOSE=1

# This has to be exported to make some magic below work.
export DH_OPTIONS

# These are used for cross-compiling and for saving the configure script
# from having to guess our platform (since we know it already)
DEB_HOST_GNU_TYPE   ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)

CFLAGS = -Werror -g
ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	CFLAGS += -O0
else
	CFLAGS += -O2
endif

export CFLAGS

SRC	:= $(CURDIR)
BUILD	:= $(CURDIR)/debian/build
TARGET	:= $(CURDIR)/debian/tmp

PYVERS  := $(shell pyversions -vs)

debian/configure-stamp: $(PYVERS:%=debian/configure-python%-stamp) 
	touch $@

debian/configure-python%-stamp: 
	dh_testdir
	[ -d $(BUILD)-python$* ] || mkdir $(BUILD)-python$*
	cd $(BUILD)-python$* && cmake $(CURDIR) -DCMAKE_INSTALL_PREFIX="/usr" \
		-DCMAKE_C_COMPILER="/usr/bin/cc" \
		-DCMAKE_C_FLAGS="-g -Wall -O2" \
		-DCMAKE_SKIP_RPATH=ON \
		-DCMAKE_VERBOSE_MAKEFILE=ON \
		-DGDCM_BUILD_APPLICATIONS=ON \
		-DGDCM_BUILD_SHARED_LIBS=ON \
		-DGDCM_WRAP_PYTHON=ON \
		-DPREFERRED_PYTHON_VERSION=python$*
	touch $@

build: debian/build-stamp

debian/build-stamp: debian/configure-stamp $(PYVERS:%=debian/build-python%-stamp)
	touch $@

debian/build-python%-stamp: 
	dh_testdir
	$(MAKE) -C $(BUILD)-python$*
	-(cd $(BUILD)-python$* && LD_LIBRARY_PATH=$(BUILD)-python$*/gdcm ctest --force-new-ctest-process -V)
	touch $@

clean:
	dh_testdir
	dh_testroot
	rm -f debian/configure*stamp debian/build*stamp 
	rm -rf debian/build*
	dh_clean

install: DH_OPTIONS=
install: debian/build-stamp install-common $(PYVERS:%=install-python%)
install-common:
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs

install-python%:
	$(MAKE) -C $(BUILD)-python$* install DESTDIR=$(TARGET)

# This single target is used to build all the packages, all at once, or
# one at a time. So keep in mind: any options passed to commands here will
# affect _all_ packages. Anything you want to only affect one package
# should be put in another target, such as the install target.
binary-common:
	dh_testdir
	dh_testroot
	dh_installchangelogs
	dh_installdocs
	dh_installexamples
	dh_installmenu
#	dh_installdebconf
#	dh_installlogrotate
#	dh_installemacsen
#	dh_installcatalogs
#	dh_installpam
#	dh_installmime
#	dh_installinit
#	dh_installman
#	dh_installcron
#	dh_installinfo
	dh_install --sourcedir=$(TARGET) --fail-missing
	dh_strip --dbg-package=libgdcm1exp3-dbg
	dh_link
	dh_compress
	dh_fixperms
#	dh_perl
	dh_pysupport
	dh_python
	dh_makeshlibs -Xformats -V
	dh_installdeb
	dh_shlibdeps
	dh_gencontrol
	dh_md5sums
	dh_builddeb

# Build architecture independant packages using the common target.
binary-indep: build install
# (Uncomment this next line if you have such packages.)
#	 $(MAKE) -f debian/rules DH_OPTIONS=-i binary-common

# Build architecture dependant packages using the common target.
binary-arch: build install
	$(MAKE) -f $(SRC)/debian/rules DH_OPTIONS=-a binary-common

# Any other binary targets build just one binary package at a time.
binary-%: build install
	make -f $(SRC)/debian/rules binary-common DH_OPTIONS=-p$*

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary-common binary install install-common
